// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String?   @unique
  name         String
  passwordHash String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  account      Account[]
}

model Account {
  id               String           @id @default(uuid())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
  providerUserName String
  provider         ProviderType
  providerUserId   String
  accessToken      String
  createdAt        DateTime         @default(now())
  repoConnection   RepoConnection[]

  @@unique([provider, providerUserId])
}

model RepoConnection {
  id            String           @id @default(uuid())
  name          String           @unique
  cloneUrl      String
  defaultBranch String
  language      String
  ownerName     String
  provider      ProviderType
  settings      ProjectSettings?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  account       Account?         @relation(fields: [accountId], references: [id])
  accountId     String?
  ReviewSession ReviewSession[]

  @@unique([accountId, name])
}

model ProjectSettings {
  id             String         @id @default(uuid())
  RepoConnection RepoConnection @relation(fields: [repositoryId], references: [name])
  repositoryId   String         @unique

  language               String
  projectType            ProjectType
  architecture           String           @default("")
  codingStyle            String
  description            String?
  entriesFilesToAnalyze  String[]         @default(["**/*.{ts,js,tsx,jsx}"])
  entriesFoldersToIgnore String[]         @default(["node_modules", "dist", "build", "public"])
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  embeddings             CodeChunkEmbed[]
}

model CodeChunkEmbed {
  id                String           @id @default(uuid())
  filePath          String
  embedding         Float[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  ProjectSettings   ProjectSettings? @relation(fields: [projectSettingsId], references: [id])
  projectSettingsId String?
}

model ReviewSession {
  id           String         @id @default(uuid())
  repository   RepoConnection @relation(fields: [repositoryId], references: [id])
  repositoryId String
  createdAt    DateTime       @default(now())
  issues       ReviewIssue[]
}

model ReviewIssue {
  id              String        @id @default(uuid())
  reviewSession   ReviewSession @relation(fields: [reviewSessionId], references: [id])
  reviewSessionId String
  filePath        String        @default("")
  title           String
  body            String
  createdAt       DateTime      @default(now())
}

enum ProviderType {
  GITHUB
  BITBUCKET
}

enum ProjectType {
  FRONTEND
  BACKEND
  FULLSTACK
}
